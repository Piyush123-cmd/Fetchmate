index.html 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>FetchMate â€“ YouTube Video Downloader</title>
  <meta name="description" content="Fast and free YouTube video downloader. Download YouTube videos in MP4, MP3, and HD quality. No login required.">
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}" />
</head>
<body>
  <div class="container">
    <header>
      <h1 class="logo">FetchMate</h1>
      <p class="tagline">YouTube Video Downloader</p>
    </header>

    <section class="download-box">
      <input type="text" id="urlInput" placeholder="Paste YouTube video URL here..." required>
      <button onclick="fetchFormats()">Convert Next</button>

      <div id="spinner" style="display:none; margin-top: 10px; color: #0073ff;">
        ðŸ”„ Fetching formats, please wait...
      </div>

      <form id="downloadForm" action="/download" method="POST" target="_blank">
        <input type="hidden" name="url" id="formUrl" />
        <div id="format-section" style="display:none; margin-top: 15px;">
          <select name="format_id" id="formatSelect" required>
            <option value="">Select Quality</option>
          </select>
          <br><br>
          <button type="submit">Download</button>
        </div>
      </form>

      <p class="info-text">Fast. Free. Supports MP4, MP3, HD and more.</p>
    </section>

    <footer>
      <p>Â© 2025 FetchMate. All rights reserved.</p>
    </footer>
  </div>
  <script src="{{ url_for('static', filename='script.js') }}"></script>
</body>
</html>



style.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, sans-serif;
  background-color: #f5f7fa;
  color: #1a1a1a;
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.container {
  max-width: 500px;
  width: 100%;
  text-align: center;
}

.logo {
  font-size: 2.5rem;
  font-weight: 700;
  color: #0073ff;
  margin-bottom: 5px;
}

.tagline {
  font-size: 1.2rem;
  color: #444;
  margin-bottom: 30px;
}

.download-box {
  background-color: #ffffff;
  padding: 25px 20px;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
}

input[type="text"] {
  width: 100%;
  padding: 14px;
  font-size: 16px;
  border-radius: 8px;
  border: 1px solid #ccc;
  margin-bottom: 15px;
  outline: none;
}

button {
  padding: 14px 30px;
  font-size: 16px;
  background-color: #0073ff;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: 0.3s ease;
}

button:hover {
  background-color: #005fd9;
}

.info-text {
  margin-top: 15px;
  font-size: 14px;
  color: #666;
}

footer {
  margin-top: 30px;
  font-size: 13px;
  color: #888;
}

select {
  width: 100%;
  padding: 12px;
  font-size: 16px;
  border-radius: 8px;
  border: 1px solid #ccc;
  outline: none;
}



app.py
from flask import Flask, request, send_file, render_template, jsonify
import yt_dlp
import os
import uuid
import threading
import time
import mimetypes

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/get_formats', methods=['POST'])
def get_formats():
    url = request.form['url']
    formats = []

    try:
        with yt_dlp.YoutubeDL({
            'quiet': True,
            'skip_download': True,
            'no_warnings': True
        }) as ydl:
            info = ydl.extract_info(url, download=False)
            seen = set()
            for f in info.get('formats', []):
                if (
                    f.get('ext') == 'mp4' and 
                    f.get('height') and 
                    isinstance(f.get('height'), int)
                ):
                    res = f['height']
                    if res in [144, 240, 360, 480, 720, 1080, 1440, 2160] and res not in seen:
                        size = round((f.get('filesize', 0) or 0) / 1024 / 1024, 1)
                        label = f"{res}p"
                        if size > 0:
                            label += f" ({size} MB)"
                        formats.append({
                            'format_id': res,  # now sending height instead of format_id
                            'label': label
                        })
                        seen.add(res)

        formats = sorted(formats, key=lambda x: int(x['label'].split('p')[0]))
        return jsonify({'formats': formats})

    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/download', methods=['POST'])
def download():
    url = request.form['url']
    height = request.form.get('format_id', '720')  # Now using resolution
    file_id = str(uuid.uuid4())
    output_path = f"{file_id}.mp4"

    ydl_opts = {
        'outtmpl': output_path,
        'format': f'bestvideo[height<={height}][ext=mp4]+bestaudio[ext=m4a]/best',
        'quiet': True,
        'merge_output_format': 'mp4',
        'retries': 10,
        'socket_timeout': 30,
        'nocheckcertificate': True,
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

        if not os.path.exists(output_path) or os.path.getsize(output_path) == 0:
            return "Error: Downloaded file not found or empty", 500

        return send_file(
            output_path,
            as_attachment=True,
            download_name='video.mp4',
            mimetype=mimetypes.guess_type(output_path)[0]
        )

    except Exception as e:
        return f"<h3 style='color:red'>Download failed: {e}</h3>"

    finally:
        def cleanup(path):
            time.sleep(10)
            if os.path.exists(path):
                try:
                    os.remove(path)
                except:
                    pass

        threading.Thread(target=cleanup, args=(output_path,)).start()

if __name__ == '__main__':
    app.run(debug=True)



script.js
function fetchFormats() {
  const url = document.getElementById('urlInput').value.trim();
  const spinner = document.getElementById('spinner');
  const select = document.getElementById('formatSelect');
  const formatSection = document.getElementById('format-section');
  const formUrl = document.getElementById('formUrl');

  if (!url) {
    alert('Please enter a YouTube video URL.');
    return;
  }

  // Show spinner
  spinner.style.display = 'block';
  formatSection.style.display = 'none';
  select.innerHTML = '<option value="">Select Quality</option>';

  // Send POST to get_formats
  const formData = new FormData();
  formData.append('url', url);

  fetch('/get_formats', {
    method: 'POST',
    body: formData
  })
  .then(res => res.json())
  .then(data => {
    spinner.style.display = 'none';

    if (data.error) {
      alert("Error fetching formats: " + data.error);
      return;
    }

    if (data.formats.length === 0) {
      alert("No formats available.");
      return;
    }

    // Add options
    data.formats.forEach(f => {
      const option = document.createElement('option');
      option.value = f.format_id;
      option.textContent = f.label;
      select.appendChild(option);
    });

    // Show format section and set hidden input
    formUrl.value = url;
    formatSection.style.display = 'block';
  })
  .catch(err => {
    spinner.style.display = 'none';
    alert("Failed to fetch formats: " + err.message);
  });
}

